#include <gtest/gtest.h>
#include <memory>
#include <vector>
#include <string>

//#include <sharechains/tracker.h>
//#include <networks/network.h>
//
//#include <sharechains/share.h>
//#include <sharechains/share_builder.h>
#include <sharechains/data.h>
#include <libdevcore/random.h>
#include <btclibs/util/strencodings.h>

TEST(SharechainDataTest, TestCheckHashLink)
{
    for (int i = 0; i < 100; i++)
    {
        auto d = c2pool::random::random_bytes(2048);
        auto x = shares::prefix_to_hash_link(d);
        ASSERT_EQ(shares::check_hash_link(x, std::vector<unsigned char>{'\0'}), coind::data::hash256(PackStream(d)));
    }
}

TEST(SharechainDataTest, TestForOneHashLink)
{
    auto d = ParseHex("1a771dd7911edade4d63db5cfda8e7595e29c089580302c4dffb2bf6bbc48e2d1621420932820f43a46e4a452cf9d2e2f281d337eb5e082b114391408a0ad12cb716f4e66327fe751968d6046009b33abd1b91538b9be0261572363deb7b4c2a1eb02e3604e57788b210e6a833177060ab5497b29f8e80eebce8c798baa218823eba857949b634dad92f1b219d9f46526744ecd9dc149412b002270f95e4d20b9427f7b924bdfba1f628a204949b47c4812d7a0cdeaa2990e7ab8f5ae75d6efa1e7729a6a85b4f256055f48a6e14144a0fbe7bc286301fb1f6aa20f31787d0e55245dc609df4ee7fd22c94c5d479e02aa00695d7038806fb35dac826e62607b1c58e8292575ae3b04cb153457b78d0757ac7eb79db9869a1a8b3bf806f904c7bdedf0dbee8ec7a23abeea3f6bed5e638e61298a134c3de88c6e15c4260b52a952c447f707ee278b386fd904025a2ac608dcdb4d9015b865d888c0e8becd93c74350b6f60b78f2299240bd7bdb08858160ae734501a412fffbb0ec5188fef45c3ee9502ada21e8fc41fe244e9b2fa1cd053630d2a07b611489e98414d88a50d1f42477dd531246399816ce89c35276420d37e1665506de3d1aff50166c171e99ac8293fa3e1bb86f247f1e950c75a2293eaf46ee3244a443c277def788df3e5f6d87dbe45b7917fa55f4f959b37567e75e92e4484e40bc6f3b4eefe0c8983bcd2bf7cfc11d4a141c7a1e32f13b1eb52e2e5ce7bff5321c7df68295823b2486718bf3efbc2e48cdff3f3b93ad1c1e165d9145c9556d5f600f09898844b99370919f3b1ab2569aee055ca8a011f4eda7bc493d9157dde1b25b80d2ace3ef6736e7736142c38845aca8186b1fb12cc516a62ae066fe367704f07a144df59822506242b4380a3222a5bef6016309d16984f87432c8c0189588dd5404f24851d433c62b56d513bf4c688c150120e36672c53d9285e05847fe8b2d2b70d04f4ba56e1137849f7e8c81380f30a38d0fae4d81cbb50d9704a45ac84d691743c60475c7082ccb142aa6ced197f35a7acfe29b4c2c514368e81334d26afe31374b33e41bd919c89f333a4f0489e0e96eca7439787288c997574ec5c09d0832b008b520407329e1c60b22ebc014865b243cf67dfb15069ef3af3edd02fcc6233bc4bd8283dd1684c4643f243b7d65d242bae3d617213bfcf295d2fad0b11fb68a0dc1ee97aea03d56fc59592a2ed991c23ee47a19904c77a43b93095ea9a090189a5a81c7e4f848880378d4ce3333e7a7c4d5a9ce04e612241e7eb1dd6c72afd28ee8f1fd1972c8f3cab189ee4090026490a9e41e269297260e932c20a03fce7ee21e3477e5bdab80ad5851814e2ce1b2e8faf087222558806328cbd02727f938599d1322f5179c050db0ee08337000d84063a03f6ac48f950b072b37fe55a2d77a3dac4453518edfc54383dd2a662c35f30d214d7915c482012edf08c1b42c0a90dcf56b9358e2abbd44c276024314f62b33f3482a886f5881d2ac742db27a736bcb087753fdfd5eba4b7d9badb13cef1cbfdafae8b3ff3d86f5150bdd549eb6a3d4fcc31f62d96e9aae8a66b7b398622ffe0a39e8fe87e79f8edb3bcb5f82c5e51cfe68a69897cc60f5ccea4c8160b4885c06b9ae4dd7cba5f0dd89a0b27e5ca38fe121cd551d9f405946086d4b3ab9e5ebb635b28006c66c29a33a59909c276fc5a9b3ce5b0f792890b71e22d9d580dadea5e2aac3d15a98530ba3e64535a1a37b0b6fb02e77f53359dc583cc591c86a25213cbfb99706df4c7ba57f9efcaa043d86951e6343ff24fc7767da5784e9541cfa806d15461370e767dbb954a7b58b1106a161157bf9e5a1a8ca57fbd42d7f9c17fd5562713ef65cd46499e80aa6507873354329b5c2c15b5ddb974138c1686d934c2ebe323e4c3a8d480cca21885dd1fb15565f4d7fef6660d5519842791990f888d81d057c4be40c88c6c993eaafa208cbf0712cf4872b9e36ae744a73b7f4a83471e7f59e72784be17b3d403eb4c3bf385e3c0a9e67a0073d2d2b92d30a9ba5c08cf8e2e8d535f6107a20b0b7c852f84b82675e0a765feac1b41703a9bbfc0c9b0e615915992325ee2d8a0e76d496b75451c39308efead38a96a989e86621e8802a52a707ff8746cff6aec62f45230da1e689cd0ecf662d6faa0c19bb49fe77fa173538bd0502ab2708acb761f662aa4bdcaabc807c08547e5ee7da38ff9826ed2568b3f44aa3d510bd6d4c26530dd12ec2c9389ab94bfc7f26ac5c5fd036e7fa3e90172b6301f91917662a3631cb7bd9d5b135a8b3819ab279ec764e8d59b69bfe7fa697f630dd5d7437ffa848e03f4c0822f7af80bab506f07877d740f449f8de0c374002b79fa370f3c3a6406723591f1f3b412e8fcb8193698cc79103dee2aa11943b98c0d8d5adef453d4bc2d281752e59e3ecebb871bb84ab8709010615b3b66e2af9e769ba5d9adfff79ade63168b1c3497765e09600de8b6e252d5900427e788c83754349839e6973c51ba81570bfeed45207249fe0508193bd9f3c12903012b92c7a252d5efdcddc5fa59c46f7aa376f7aadabe6142d7f39ad2f54d7fd155c672a211915e310ec2af4171eea9dba04f4bfd5c5223ad4ff661384547eb381c7f09cfb1e47f9007f2cd68ba5c7df67d38c6fe9486d5ba6b9c3d438d15e22528aecdf3add0e2c68f7a5a13421130ec07d15d242fadc2fd234d68f36d108e8ff8779bd14baf9296c90d280ce12202bc59785e4811a96f269a0dbbb59d7743a4f74cf0c32374f27e5b1f0d5e0326d2022260b36524f5890f5661d90d44d972bb5929295dc101f1df23b0e75d0167989da027939e7ce9357fc9e221201c9ee42eb8f06d621e0fb7ab53a3036ea6947ed6");
    auto x = shares::prefix_to_hash_link(d);

    ASSERT_EQ(shares::check_hash_link(x, std::vector<unsigned char>{'\0'}), coind::data::hash256(PackStream(d)));

    std::cout << "test" << std::endl;
}

TEST(SharechainDataTest, TestForCustomState)
{
    auto d = ParseHex("c615011e9bc97dfbfe49315758192525ded55c0660a02e75cb9b7f26ab2ff158ffc00580536eaeb322f49494084bd487f3c84047d2fbb737025de2d26f3094111c5941791a91587d60a7fd599a95dd39ab437b23c10f302f4cf459b4df75755638884c454710b901b78e72d5922d336e457039ed6eacafdaf9988f5950c714ebc9ac5eef50990651b8c9c5b660922942bcb4e3651961922aa358dc726dd3f694d2514bbab250d97f6a9b495f62151699144d24dba7f446c1f80e3fe2f4790298c964bdb2198349df3c03f0161e13923709c301b42da0338a1dff246e403cf4eb84ca490f14314c2385059551b8ea4681610b196488b86fa47218821fc8f514e5f90e201c805602d79aa1087f407b667cb8d2d94b713b2c2e998b18e2134777d62943594f6871ff4e62d2b53782ef22c9528363b5c64b1248fb5728e2c7c276e530d1a4c03b240f86efc63f33c05f14da593f8048a41df8521415315f44bc3d897f39f92dc2f4ae78c13615d7b24208f0eb199f8bc13b9a23d271101dcea3e3cc3d4d54e3a40e759bdef8920ef8d8241a2178a3467409a0a840d5fa24bdd786d8c6b518cb2e38b8af60cfe57a6b2e6e1419405ac9cd44513700604c8831a9568fa7fd36b0aa7afd70d6df50a5ad3d61fc5297c53ec9734e5c6aae8fc155ba74d472dac9b8393c86a9ef9cc0332f752964dcbefa77e9d6407620f43a2a115c6ac54ac038f8f774149647dcbd1ff68f4c53e0813a9f57f356bc66876aee2bebb547e65f341129f9b3ea7da85019e03a4e3481f0b53ffba021bf1f5309856802f6e1a4572d82935db67e71008f829dda279511d0f898f441b44000bc989bb957498007525ddcdc4775e84317442a9c378ac03ecdfd92f3f53ba4c06011bbac05522cdef08f0ba2315e60590d8f3fb53a59573c9cac901ad9dd683bd8af9ecd9385c9fb6d6d510e0ff3189221ff071bba1bf3cd9c3e6011a56d51f23e8138833793ad2045c00cf1976dfc7bb3253e7ca053c2074b5529fb1b85466532fdf04018709e4e8ac53a17c5189f9eafe924ef4b5a733ba40260ea0b57366d7d3cc56f6d2283d0ec0981e27648e5e005b3af410dc6c605ccb3c47f1159f6266690ffa2c0bb0834fad1290cc1935f54a5f69371d5bb8fe0160f8b475201d884bc3e21f025b9645ff5c5cec09cae451c67e4b7ff07d17ea2c5105feecacecfe1382a65865c7b07faf106fcf8d3038ca21d38b4ae617a90047cbf7bc53d5d810a02d0134b3176aac8f5a4f83bb06d2fa842e5e968295697b701b84ab2fcc902e3be1049328b9936c42377b8afaac2320647e6d808d0a590d5047979d6bd894304b0965ae00cc793365e55bb14974e07299bf9803c1db27731d2430cd659005bd4c9269b4d15608d4912734dfe7115d50aa900f0b99d848c1d2489b83c7051217e51d4fffa3c4571b064de3fc79e182c101520a4a683118ca7bf30d00396c8b65df97e658fe30bd266741a5379522e19168b0ae83e4673527d6f97db5c749c657926b858daf78c2508d373c210f872362fb2715988cc257f2374c129d433df0844ff7e31fb0369c6bd5cfd4c8ec35ec20c7aeede4c59becd69bdf9378c8e650aeab08de0c0687f23454b504e023844ce8818764ee763f9d34e3f3a56f87647fd16aba9ce3f56c22d8d93ccff9a993c8db314b3f3cbb041890077e8eeba49fa77e0f4723c26fd851b3498a3a4121ceb9ba3f9415b62a547d35532f5745ff7302a44e73c541e92fec8599ef84b6153e006b0f206308f410715da40f94ff368cfb1348620f13ddad30226ad3a5ff7d2ee30430dc508cc58ca5d9ba7d54190c5ff00ccde917b56a7fca3a056fb6404f311b2a30b83e70bfdc9fcd74fcbb11ece84f8ab7b66395ec7291774ea9576d5e030d9ade608ae2406840c5da1dd19ab2c35106e29ec2cc11de0b47faaf27e2551aae61eaac1640850287f142204dc348b80badff445f20ecb01e348cd745b49bcd05fc501269d9ecbc8f6e5686f54bda61bfc8c359959eb1fb70a6758a19ffd8ea16b9cf71c40d12c461b42855c3debbe5f15063eaa16b676c8ff053df3e75a5193df6a8834e1e7e35cb4259374ce100dbea372cb0188ab5b8d7efae9f8639bb842643d727a1ee91558424986f97365af2d03aa008af9ad6d72fdbc5bc21ae32a90c51984767de5eda2528bddf17c9371036f23bdf81a8f492655b8a1cd31ded58c1fb838a1e30005cf32843e6fc293b3d17eb9d5f9ae38af0cf2b8ac5fbcd7c3102721328f8e007b0559e55aef06abaeb37282dce84df324d73b2b8abbfb09f3a4758e9fd7c11cb3676ba3929dddeae793bb2e83269fb8e966f3f31a768bcc9e461e524df88ba0c2721f6433927ac012932e9853cfa4fe5bf06673c49e5b1cf97d80a4a3d79dd8a932574ed5f3b66bfd37f8717ed6c99bc8c3791293e56370500ea946811a82fe352f279067cdb4ee4dd089021a131ce3f696c986fd02efc4bb6d144126ff8bc0df994eae3eea9b07ce7228bbcd612b236f5addee3ef219cd43a81261ad13a84688d153aa9b786375b3e8786228287b5708a874558dfe9eeb0ca68403e7d157c43a7eff97b54c5a6970820d12b77f6dcc3cab10f6d6b5a8a73cb049ff38334101b3c98b6a44a912d882590d8ee5707b3cf583cc8c9674c8762fdcf2167d1497e0f8ccfce18b4520093cacebf427c7251ac9745327c5c155d690b02e01bbbceea8187fee0ddc8c4c7c84290eeef5a93bc55e49ea1b65c39bcc1ede79eb54b23366f3a7615490b6f344392828edce70bc75e6f4c50504eaffac649a4000bd70d58f182eac7c13373aaffa43741ba56b62df4400a9c9dbfa5d8e901e5962dc7d53744b79f906d23234c61b50b77a21177a1821e13f");

    auto sha = CSHA256().Write(&d[0], d.size());
    vector<unsigned char> out;
    out.resize(CSHA256::OUTPUT_SIZE);
    WriteBE32((unsigned char *)&out[0], sha.s[0]);
    WriteBE32(&out[0+4], sha.s[1]);
    WriteBE32(&out[0+8], sha.s[2]);
    WriteBE32(&out[0+12], sha.s[3]);
    WriteBE32(&out[0+16], sha.s[4]);
    WriteBE32(&out[0+20], sha.s[5]);
    WriteBE32(&out[0+24], sha.s[6]);
    WriteBE32(&out[0+28], sha.s[7]);

    auto hex_hash = HexStr(out);
    ASSERT_EQ(hex_hash, "879387d528687af19a517741752be3ae32b2e472052cba9152e1fa978e3a33e9");

}