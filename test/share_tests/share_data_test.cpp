#include <gtest/gtest.h>
#include <memory>
#include <vector>
#include <string>

//#include <sharechains/tracker.h>
//#include <networks/network.h>
//
//#include <sharechains/share.h>
//#include <sharechains/share_builder.h>
#include <sharechains/data.h>
#include <libdevcore/random.h>
#include <btclibs/util/strencodings.h>

TEST(SharechainDataTest, TestCheckHashLink)
{
    for (int i = 0; i < 100; i++)
    {
        auto d = c2pool::random::random_bytes(2048);
        auto x = shares::prefix_to_hash_link(d);
        ASSERT_EQ(shares::check_hash_link(x, std::vector<unsigned char>{}), coind::data::hash256(PackStream(d)));
    }
}

TEST(SharechainDataTest, TestForOneHashLink)
{
    auto d = ParseHex("2cac3142e0b9ab078f1d8317f4b1817ef98b16f3af87fc9e0c460c60b1b36117f62ad84deca35f912aa2d015743c70d42c913c8fc589218901b5d7eb6a7c2e7c215ac920cd52e7dac7bbfa80602ba9d89148d32d9bdd668ab3bbbdc73b124ea2cf392ba28ce6751363e89af633aa47d4420c0467750a2b3a3a2fcd54d855dbc4bded85c53219968d7a15105a3a70eb66d514d1a90ae334975b915e9080ae6c57acc2391c99ca10f30b55d7a2d3cdc59e00d85f5610e17e2202056ba55cbd8b6f87538290e304b2ff386894754232cd0ca31b238605598007be22c931987a162df49b88ea81fc3c7f170cb2540458b0dd8b87e14a4132f225c41a47a52af8a44be138ab20211d5979853af139955ef30048da78adc63444a650c1d676932ed1467b30e922d9cf3fd8b93202914de274b2ca861f629d851fa1ec2338333d200f212121ed114ee8a434263c6639e759d2735d7db5b38c2c63d88fa0ad2c7400caf672717a7461d49da8e564629785abd625e3fa82681f1a2af71ed0dc477b2c73621fb64f2d5a5df47cec261f06caf611cac2cd425188f0635836433df2f51bd6b794c82c6cff6883bbc291c35c4892cb6e48a98cf27a74508647736c4b3d53c8671ff9cecfe724b14c7133f6dca8ce705625210ac7ad9e15d2b9b2892a31d43c082ca6d0d1e7c5572129fb558868060932ca4d7dfa0773c0f1a54068b362b95e442d1783bbcde1fd61cfe1550004cf6602ee1230dea3a9de6a61d6ce826ab21312f3db1db262d72ce90cbae5e14f5669cde23034f1d4b6f96c0b40772729a411506d7e36fb40fcb1bcf331d18f5b076afdf1f5c5a0e63f02628c7efda4eba8fac2c342709fa74bb9e9a109472f1ab8fad4c9c831351eb0cf42bf080f7837d692b286874f28a60b45dc286d6c5a0eff39072cbb644b53f75b972aa5b460d93113437e612714168f7f99fbfa1a6b5ccc1f8df249133b0f0927e5f4f5d3c5c285ed2a2a186aaf1c89153fbcc4297875b23ecc770d0368652c4a621f0e6613fd118269b48af44f903d7b3bf49ea1c602b19a215bfffe9a16200809644805af57307bce62d927abc97edbf17112a1505ac548e9ad66850bd2d8f54d4cd8a25d9bcfc674da01e3b2852855295d7786f067198cbe698b70afd3e6fc224a9104e4756a4936300e9c36ec0bb583af01596c82ed8af195ac7b220af074d3c45fd92915087639f628e16d582812eb928b6b6d078c1b8d679bf6edeacc04f443f4d3d1010a473d798802104ae2081a4ee65e028d213dee761ad5b164ad6c13f295a04f3fdea6133b1d4f62d7fc1051f660c52674a9d9d5e93ed5b76f2043c46ce9bc135884372196abc4c3e7f500745e8aa79eb1c8de8bce89b92b50d408c88315fac94fb3b877f7d3c3bf660d6e26703fb42445b2a0fab511efbf2c27c45e4ebb239c1abfde411e8b1fee201e98b82efb7ca5f703c083a502864e1a97e9428baf4d934c2483521de5a45d22a980068deb0d6bb484a1b2a5d6ecc058b281a40351f96dba9f75956f86df449f639742f35c66b645310690fabc5cb0b62238648e0c023fbeade78484a7430df250199badf6d21dcdb18d85af33e2ec0e46f5b0471ee8eb39c6cea0e24ef61c733ff841b4985671cbd9766834da273de5ec868b649d18bfc191a0d81e746b472a2252861727819ec25592b2364d9a1304e22e8b23b9590400bc2f2c37d5a6265e033caab8111c08157290fbc8ae058067afc93d003fb1d352f69954b01266d1e3837424b2bf0821bc843c88d699f65cc5dfce03044de960ce2402d220a28deb6572821f6f4d067b5c383e7737dfcd447474414569c50b56aa11f6751dcc6ff0e42ca896b3991a6e5bad742f57eccea802b8b860f4e963f0252212aaa03891cdd903b7f652c41054cef946d1a43f6098072315a26897dcb2e18a53aea2047bc144ee3e54c7ee1a95e35ecc6ba07b7d75fb23d13fe68da5fea291311f6f13495e6d6bde3a22e45cd3901c5d997a88689d8a1de48196b4cbe15b149af7368624eb477fd828bcfca2450824bf9088661e76c1b0349945d982c9346256014095cd16803da9e2faa1caf0864ff67deaa4c626198bacc5dab56b0bf52641a901bafa1a1a7f16620ba4effc5924e1934ec65787d0d2f800043a8ba44ba05abc88adee767fa75b6eda88736fa3a03e5e7cea4919f3de67cc7909b4bd6335dcd0abb5af8eca799c377d51270c3e6705fd37d959f74a241fd7615dc5626302f3d1b83701f79fbd020f237c526e5345571478171a20427e83ce84ef04d8ea29c7e2a62e7f9cdae2eb4cd16af0f6c5baea9078ab5e8040617eb4fd0f79c6dff01b56066a020b835bc3381aa8757444623dda6d6c82a05562d4fa9b991a5ed63f12bd303dc8bdf86767b6abb83afedfe9c35dc4e519310cf19b263bb4ee2ff3b8558ffb23a73e489fa93f81ad54654dae6d9bd91c4c7c78b5c669c3e83c6de6c74d6ef12cc04b77e11b0ef887c9f06edab0e3d727295a60596b580e5ccd210c64d79d2c926bb093a268337a4281089838cf67b121e751e943db3be2964094d14451e70eec13abe217b61755bf0482b05ebfe0dd981cc41e299212a98ddc3c340b6958c7b093b97dd917c0c4ac7d08663dc1c392bbca238a34c2c4fadcba9a818ca0ba85c74899190ad1ab3c145d3cb2edf2ce73ddf19c9be7bb569a6137cd5e8892047da64db78a4631a08d4d9268f1088cfd9c707c4822ec8f92cf0299fd4db7fb2a939ad2172fbcadd8852c45332b061c93000954e9ebe49db892ef42c11b9ba1a845ea7e6d429d554c4caf961bad5b8a526bfb89322256dff206cef24624927d99d3cb121324236319a95665eaf48d41e8b36a4c4a092dffde30799ab281c1c6ef");
    auto d2 = (unsigned char*)"2cac3142e0b9ab078f1d8317f4b1817ef98b16f3af87fc9e0c460c60b1b36117f62ad84deca35f912aa2d015743c70d42c913c8fc589218901b5d7eb6a7c2e7c215ac920cd52e7dac7bbfa80602ba9d89148d32d9bdd668ab3bbbdc73b124ea2cf392ba28ce6751363e89af633aa47d4420c0467750a2b3a3a2fcd54d855dbc4bded85c53219968d7a15105a3a70eb66d514d1a90ae334975b915e9080ae6c57acc2391c99ca10f30b55d7a2d3cdc59e00d85f5610e17e2202056ba55cbd8b6f87538290e304b2ff386894754232cd0ca31b238605598007be22c931987a162df49b88ea81fc3c7f170cb2540458b0dd8b87e14a4132f225c41a47a52af8a44be138ab20211d5979853af139955ef30048da78adc63444a650c1d676932ed1467b30e922d9cf3fd8b93202914de274b2ca861f629d851fa1ec2338333d200f212121ed114ee8a434263c6639e759d2735d7db5b38c2c63d88fa0ad2c7400caf672717a7461d49da8e564629785abd625e3fa82681f1a2af71ed0dc477b2c73621fb64f2d5a5df47cec261f06caf611cac2cd425188f0635836433df2f51bd6b794c82c6cff6883bbc291c35c4892cb6e48a98cf27a74508647736c4b3d53c8671ff9cecfe724b14c7133f6dca8ce705625210ac7ad9e15d2b9b2892a31d43c082ca6d0d1e7c5572129fb558868060932ca4d7dfa0773c0f1a54068b362b95e442d1783bbcde1fd61cfe1550004cf6602ee1230dea3a9de6a61d6ce826ab21312f3db1db262d72ce90cbae5e14f5669cde23034f1d4b6f96c0b40772729a411506d7e36fb40fcb1bcf331d18f5b076afdf1f5c5a0e63f02628c7efda4eba8fac2c342709fa74bb9e9a109472f1ab8fad4c9c831351eb0cf42bf080f7837d692b286874f28a60b45dc286d6c5a0eff39072cbb644b53f75b972aa5b460d93113437e612714168f7f99fbfa1a6b5ccc1f8df249133b0f0927e5f4f5d3c5c285ed2a2a186aaf1c89153fbcc4297875b23ecc770d0368652c4a621f0e6613fd118269b48af44f903d7b3bf49ea1c602b19a215bfffe9a16200809644805af57307bce62d927abc97edbf17112a1505ac548e9ad66850bd2d8f54d4cd8a25d9bcfc674da01e3b2852855295d7786f067198cbe698b70afd3e6fc224a9104e4756a4936300e9c36ec0bb583af01596c82ed8af195ac7b220af074d3c45fd92915087639f628e16d582812eb928b6b6d078c1b8d679bf6edeacc04f443f4d3d1010a473d798802104ae2081a4ee65e028d213dee761ad5b164ad6c13f295a04f3fdea6133b1d4f62d7fc1051f660c52674a9d9d5e93ed5b76f2043c46ce9bc135884372196abc4c3e7f500745e8aa79eb1c8de8bce89b92b50d408c88315fac94fb3b877f7d3c3bf660d6e26703fb42445b2a0fab511efbf2c27c45e4ebb239c1abfde411e8b1fee201e98b82efb7ca5f703c083a502864e1a97e9428baf4d934c2483521de5a45d22a980068deb0d6bb484a1b2a5d6ecc058b281a40351f96dba9f75956f86df449f639742f35c66b645310690fabc5cb0b62238648e0c023fbeade78484a7430df250199badf6d21dcdb18d85af33e2ec0e46f5b0471ee8eb39c6cea0e24ef61c733ff841b4985671cbd9766834da273de5ec868b649d18bfc191a0d81e746b472a2252861727819ec25592b2364d9a1304e22e8b23b9590400bc2f2c37d5a6265e033caab8111c08157290fbc8ae058067afc93d003fb1d352f69954b01266d1e3837424b2bf0821bc843c88d699f65cc5dfce03044de960ce2402d220a28deb6572821f6f4d067b5c383e7737dfcd447474414569c50b56aa11f6751dcc6ff0e42ca896b3991a6e5bad742f57eccea802b8b860f4e963f0252212aaa03891cdd903b7f652c41054cef946d1a43f6098072315a26897dcb2e18a53aea2047bc144ee3e54c7ee1a95e35ecc6ba07b7d75fb23d13fe68da5fea291311f6f13495e6d6bde3a22e45cd3901c5d997a88689d8a1de48196b4cbe15b149af7368624eb477fd828bcfca2450824bf9088661e76c1b0349945d982c9346256014095cd16803da9e2faa1caf0864ff67deaa4c626198bacc5dab56b0bf52641a901bafa1a1a7f16620ba4effc5924e1934ec65787d0d2f800043a8ba44ba05abc88adee767fa75b6eda88736fa3a03e5e7cea4919f3de67cc7909b4bd6335dcd0abb5af8eca799c377d51270c3e6705fd37d959f74a241fd7615dc5626302f3d1b83701f79fbd020f237c526e5345571478171a20427e83ce84ef04d8ea29c7e2a62e7f9cdae2eb4cd16af0f6c5baea9078ab5e8040617eb4fd0f79c6dff01b56066a020b835bc3381aa8757444623dda6d6c82a05562d4fa9b991a5ed63f12bd303dc8bdf86767b6abb83afedfe9c35dc4e519310cf19b263bb4ee2ff3b8558ffb23a73e489fa93f81ad54654dae6d9bd91c4c7c78b5c669c3e83c6de6c74d6ef12cc04b77e11b0ef887c9f06edab0e3d727295a60596b580e5ccd210c64d79d2c926bb093a268337a4281089838cf67b121e751e943db3be2964094d14451e70eec13abe217b61755bf0482b05ebfe0dd981cc41e299212a98ddc3c340b6958c7b093b97dd917c0c4ac7d08663dc1c392bbca238a34c2c4fadcba9a818ca0ba85c74899190ad1ab3c145d3cb2edf2ce73ddf19c9be7bb569a6137cd5e8892047da64db78a4631a08d4d9268f1088cfd9c707c4822ec8f92cf0299fd4db7fb2a939ad2172fbcadd8852c45332b061c93000954e9ebe49db892ef42c11b9ba1a845ea7e6d429d554c4caf961bad5b8a526bfb89322256dff206cef24624927d99d3cb121324236319a95665eaf48d41e8b36a4c4a092dffde30799ab281c1c6ef";
//    auto x = shares::prefix_to_hash_link(d);

    uint32_t _init[8] {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05644c, 0x1f83d9ab, 0x5be0cd12};
    auto sha = CSHA256().Write(d2, strlen((char*)d2));
    unsigned char* buff;
    sha.Finalize(buff);

    std::cout << "test";

}