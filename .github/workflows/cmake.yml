name: CMake
on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        name: [ubuntu-latest-g++]
        include:
          - name: ubuntu-latest-g++
            os: ubuntu-latest
            cxx: g++-8
            cc: gcc-8

    steps:
    - uses: actions/checkout@v2
    
    - name: Install leveldb
      run: sudo apt-get install libleveldb-dev

    - name: Install libcurl
      run: sudo apt-get update && sudo apt-get install libcurl4-openssl-dev

    - name: GCC INSTALL
      run: |  
        echo "Adding ppa:ubuntu-toolchain-r/test apt-repository "
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        sudo apt-get -y update 

        sudo apt-get -y install build-essential
        sudo apt-get -y install gcc-8 g++-8
#        sudo apt install gcc-8 g++-8
#        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 --slave /usr/bin/g++ g++ /usr/bin/g++-8
    
   # install dependencies
    - name: Cache boost
      uses: actions/cache@v1.0.3
      id: cache-boost
      with:
        path: "~/boost"
        key: libboost1.71-all-dev
    - name: Install boost
      run: |
          sudo apt-get update && sudo apt-get install -yq libboost-filesystem1.71-dev && sudo apt-get install -yq libboost1.71-all-dev
          mkdir -p ~/boost
          for dep in libboost1.71-all-dev; do
            dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/boost/
          done
      
    - name: Create Build Environment
    
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE --target c2pool_main -j 6 --

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
